/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra.view;

import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.ActorTransferable;
import hr.algebra.model.Director;
import hr.algebra.model.DirectorTransferable;
import hr.algebra.model.Movie;
import hr.algebra.utils.MessageUtils;
import hr.algebra.view.model.MovieTableModel;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.MOVE;

/**
 *
 * @author Patrik
 */
public class EditActorsAndDirectorsPanel extends javax.swing.JPanel {
    
    private Repository repo;
    private MovieTableModel moviesTableModel;
    
    private List<Actor> allActors = new ArrayList<>();
    private List<Actor> movieActors = new ArrayList<>();
    private List<Director> allDirectors = new ArrayList<>();
    private List<Director> movieDirectors = new ArrayList<>();
    
    private final DefaultListModel<Actor> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Actor> movieActorsModel = new DefaultListModel<>();
    
    private final DefaultListModel<Director> allDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Director> movieDirectorsModel = new DefaultListModel<>();
    
    private Movie selectedMovie;

    /**
     * Creates new form EditActorsAndDirectors
     */
    public EditActorsAndDirectorsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovieActors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        lsMovieDirectors = new javax.swing.JList<>();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        lbMovieName = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(tbMovies);

        jLabel1.setText("Actors");

        jLabel2.setText("Directors");

        jScrollPane1.setViewportView(lsAllActors);

        jScrollPane2.setViewportView(lsMovieActors);

        jScrollPane3.setViewportView(lsAllDirectors);

        jScrollPane9.setViewportView(lsMovieDirectors);

        btnRemoveActor.setText("Remove actor");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveDirector.setText("Remove director");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        lbMovieName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbMovieName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMovieName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(332, 332, 332))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(btnRemoveActor, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemoveDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lbMovieName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane3)
                        .addComponent(jScrollPane9))
                    .addComponent(lbMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRemoveActor, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnRemoveDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        showMovieInfo();
    }//GEN-LAST:event_tbMoviesKeyReleased

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        showMovieInfo();
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        Actor actor = lsMovieActors.getSelectedValue();
        if (actor != null && selectedMovie != null) {
            try {
                repo.deleteMovieActor(selectedMovie.getId(), actor.getId());
            } catch (Exception ex) {
                Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        showMovieInfo();
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        Director director = lsMovieDirectors.getSelectedValue();
        if (director != null && selectedMovie != null) {
            try {
                repo.deleteMovieDirector(selectedMovie.getId(), director.getId());
            } catch (Exception ex) {
                Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        showMovieInfo();
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lbMovieName;
    private javax.swing.JList<Actor> lsAllActors;
    private javax.swing.JList<Director> lsAllDirectors;
    private javax.swing.JList<Actor> lsMovieActors;
    private javax.swing.JList<Director> lsMovieDirectors;
    private javax.swing.JTable tbMovies;
    // End of variables declaration//GEN-END:variables
    
    private void init() {
        try {
               initRepository();
               initTables();
               initDnD();
               initLists();
            } catch (Exception ex) {
                Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Unrecoverable error", "can not initilaze form");
                System.exit(1);
            }
    }
    
    private void initTables() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(repo.selectMovies());
        tbMovies.setModel(moviesTableModel);
    }

    private void initRepository() throws Exception {
        repo = RepositoryFactory.getRepository();
    }

    private void clearForm() {
        movieActorsModel.clear();
        movieActors.clear();
        movieDirectorsModel.clear();
        movieDirectors.clear();
    }    
    
    private void initDnD() {
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setTransferHandler(new ExportActorTransferHandler());

        lsMovieActors.setDropMode(DropMode.ON);
        lsMovieActors.setTransferHandler(new ImportActorTransferHandler());    
        
        
        lsAllDirectors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllDirectors.setDragEnabled(true);
        lsAllDirectors.setTransferHandler(new ExportDirectorTransferHandler());

        lsMovieDirectors.setDropMode(DropMode.ON);
        lsMovieDirectors.setTransferHandler(new ImportDirectorTransferHandler());    
    }
    
    private void showMovieInfo() {
        clearForm();
        
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            movieActors = repo.selectActorsByMovieId(selectedMovieId);
            Optional<Movie> selMovie = repo.selectMovie(selectedMovieId);
            selectedMovie = selMovie.get();
            lbMovieName.setText(selectedMovie.getTitle());
            if (!allActors.isEmpty()) {
                movieActors.forEach(movieActorsModel::addElement);
                lsMovieActors.setModel(movieActorsModel);
            }
            
            movieDirectors = repo.selectDirectorsByMovieId(selectedMovieId);
            if (!movieDirectors.isEmpty()) {
                movieDirectors.forEach(movieDirectorsModel::addElement);
                lsMovieDirectors.setModel(movieDirectorsModel);    
            }
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to show movie data! /" + ex.getMessage());
        }
    }

    private void initLists() throws Exception {
        allActors = repo.selectActors();
        allDirectors = repo.selectDirectors();
        
        if (!allActors.isEmpty()) {
            allActors.forEach(allActorsModel::addElement);
            lsAllActors.setModel(allActorsModel);
        }
        
        if (!allDirectors.isEmpty()) {
            allDirectors.forEach(allDirectorsModel::addElement);
            lsAllDirectors.setModel(allDirectorsModel);  
        }
    }
    
    private void loadModels() throws Exception {
        clearForm();
        
        List<Actor> actors = repo.selectActorsByMovieId(selectedMovie.getId());
        actors.forEach(movieActorsModel::addElement);
        lsMovieActors.setModel(movieActorsModel);

        List<Director> directors = repo.selectDirectorsByMovieId(selectedMovie.getId());
        directors.forEach(movieDirectorsModel::addElement);
        lsMovieDirectors.setModel(movieDirectorsModel);   
    }
    
    
    
    
    
    
    
    
    //TRANSFER HANDLERS
    
    private class ExportActorTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new ActorTransferable(lsAllActors.getSelectedValue());
        }
    }

    private class ImportActorTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(ActorTransferable.ACTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Actor actor = (Actor) transferable.getTransferData(ActorTransferable.ACTOR_FLAVOR);
                if (movieActors.add(actor) && selectedMovie != null) {
                    try {
                        repo.createMovieActor(selectedMovie.getId(), actor.getId());
                        loadModels();
                    } catch (Exception ex) {
                        Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
        
    
    
    private class ExportDirectorTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            return new DirectorTransferable(lsAllDirectors.getSelectedValue());
        }
    }

    private class ImportDirectorTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(DirectorTransferable.DIRECTOR_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Director director = (Director) transferable.getTransferData(DirectorTransferable.DIRECTOR_FLAVOR);
                if (movieDirectors.add(director) && selectedMovie != null) {
                    try {
                        repo.createMovieDirector(selectedMovie.getId(), director.getId());
                        loadModels();
                    } catch (Exception ex) {
                        Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(EditActorsAndDirectorsPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }
    }
}
